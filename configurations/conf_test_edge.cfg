# This template file shows all configuration options and possible values.
# Do not use inline comments in your config files. 
# This breaks the config parser (so this example doesn't work as well!)
#-------------------------------------------------
# Infrastructure settings
#-------------------------------------------------
[infrastructure]
# VM provider
provider = qemu

# Only do infrastructure deployment, ignore the benchmark
infra_only = False

# Number of VMs to spawn per tier
cloud_nodes = 0
edge_nodes = 10
endpoint_nodes = 0

# Number of cores per VM
cloud_cores = 6
edge_cores = 2
endpoint_cores = 1

# CPU bandwidth quota (at 0.5 a VM will use a CPU core for half of the time)
cloud_quota = 1.0
edge_quota = 1
endpoint_quota = 0.5

# Enable cpu core pinning - VM cores will be pinned to physical CPU cores
# Requires total_VM_cores < physical_cores_available (or add more external machines)
cpu_pin = False

# Enable network emulation (and use default values for wired networking between cloud and edge)
network_emulation = True

# (OPTIONAL) Network preset for wireless communication between endpoint and cloud/edge
wireless_network_preset = 4g

# Use more physical machines than the one you are currently using
#external_physical_machines = user@machine1,user@machine2 # Any valid SSH address

# Do a netperf network benchmark 
netperf = False

# Create a .continuum folder at this location, on every physical machine
# Store all of continuum's files here: Ansible inventory, Libvirt configs, VM images, etc.
# Provide the full path, possibly with ~
base_path = /mnt/sdc/ds2022-lab2-1

prefixIP = 192.168
middleIP = 132
middleIP_base = 202

#-------------------------------------------------
# Benchmark settings
#-------------------------------------------------
[benchmark]
# Resource manager to use for cloud and/or edge (can be ommited for endpoint-only)
resource_manager = kubernetes
   # Options: kubernetes (cloud mode), kubeedge (edge mode)
resource_manager_only = True

# Force docker pull for application updates
docker_pull = False

# Delete VMs after benchmark run
delete = False

# Application to use
application = image_classification

# Data generation frequency in data entities / second
frequency = 5

#-------------------------------------------------
# Execution Model settings
#-------------------------------------------------
[execution_model]
model = openFaas